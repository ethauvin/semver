/*
 * This file is automatically generated by the Semantic Version Annotation Processor.
 * Do not modify this file -- YOUR CHANGES WILL BE ERASED!
 */
package ${packageName};

import java.util.Date;

/**
 * This class provides semantic version information.
 *
 * @author Semantic Version Annotation Processor
 */
public final class ${className} {
	private final static String buildmeta = "${buildmeta}";
	private final static Date date = new Date(${epoch}L);
	private final static int major = ${major};
	private final static int minor = ${minor};
	private final static int patch = ${patch};
	private final static String prerelease = "${prerelease}";
	private final static String project = "${project}";

	/**
	 * Returns the build date.
	 *
	 * @return The build date.
	 */
	public static Date getBuildDate() {
		return date;
	}

	/**
	 * Returns the full version.
	 *
	 * @return The full version string.
	 */
	public static String getVersion() {
		return "" + getMajor() + '.' + getMinor() + '.' + getPatch() + getPreRelease() + getBuildMetadata();
	}

	/**
	 * Returns the major version.
	 *
	 * @return The major version.
	 */
	public static int getMajor() {
		return major;
	}

	/**
	 * Returns the minor version.
	 *
	 * @return The minor version.
	 */
	public static int getMinor() {
		return minor;
	}

	/**
	 * Returns the patch version.
	 *
	 * @return The patch version.
	 */
	public static int getPatch() {
		return patch;
	}

	/**
	 * Returns the pre-release version.
	 *
	 * @return The pre-release version, if any.
	 */
	public static String getPreRelease() {
		if (prerelease.length() > 0) {
			return '-' + prerelease;
		}

		return "";
	}

	/**
	 * Returns the project name.
	 *
	 * @return The project name, if any.
	 */
	public static String getProject() {
		return project;
	}

	/**
	 * Returns the build metadata.
	 *
	 * @return The build metadata, if any.
	 */
	public static String getBuildMetadata() {
		if (buildmeta.length() > 0) {
			return '+' + buildmeta;
		}

		return "";
	}
}