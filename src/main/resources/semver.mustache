/*
 * This file is automatically generated.
 * Do not modify! -- ALL CHANGES WILL BE ERASED!
 */
package {{packageName}};

import java.util.Date;

/**
 * Provides semantic version information.
 *
 * @author <a href="https://github.com/ethauvin/semver">Semantic Version Annotation Processor</a>
 */
public final class {{className}} {
    public final static String PROJECT = "{{project}}";
    public final static Date BUILDDATE = new Date({{epoch}}L);
    public final static int MAJOR = {{major}};
    public final static int MINOR = {{minor}};
    public final static int PATCH = {{patch}};
    public final static String PRERELEASE = "{{preRelease}}";
    public final static String PRERELEASE_PREFIX = "{{preReleasePrefix}}";
    public final static String BUILDMETA = "{{buildMeta}}";
    public final static String BUILDMETA_PREFIX = "{{buildMetaPrefix}}";
    public final static String SEPARATOR = "{{separator}}";

    /**
     * The full semantic version string.
     */
    public final static String VERSION = Integer.toString(MAJOR) + SEPARATOR + Integer.toString(MINOR) + SEPARATOR
            + Integer.toString(PATCH) + preReleaseWithPrefix() + buildMetaWithPrefix();

    /**
     * Disables the default constructor.
     *
     * @throws UnsupportedOperationException If the constructor is called.
     */
    private {{className}}()
            throws UnsupportedOperationException {
        throw new UnsupportedOperationException("Illegal constructor call.");
    }

    /**
     * Returns the build metadata with {@value #BUILDMETA_PREFIX} prefix.
     *
     * @return The build metadata, if any.
     */
    public static String buildMetaWithPrefix() {
        return buildMetaWithPrefix(BUILDMETA_PREFIX);
    }

    /**
     * Returns the build metadata.
     *
     * @param prefix Prefix to prepend.
     * @return The build metadata, if any.
     */
    public static String buildMetaWithPrefix(final String prefix) {
        if (BUILDMETA.length() > 0) {
            return prefix + BUILDMETA;
        } else {
            return BUILDMETA;
        }
    }

    /**
     * Returns the pre-release version with {@value #PRERELEASE_PREFIX} prefix.
     *
     * @return The pre-release version, if any.
     */
    public static String preReleaseWithPrefix() {
        return preReleaseWithPrefix(PRERELEASE_PREFIX);
    }

    /**
     * Returns the pre-release version.
     *
     * @param prefix The prefix to prepend.
     * @return The pre-release version, if any.
     */
    public static String preReleaseWithPrefix(final String prefix) {
        if (PRERELEASE.length() > 0) {
            return prefix + PRERELEASE;
        } else {
            return PRERELEASE;
        }
    }
}
